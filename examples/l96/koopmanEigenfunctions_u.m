% Koopman eigenfunctions for turbulent velocity field generated by the 
% Lorenz 96 system.

%% MAIN CALCULATION PARAMETERS AND OPTIONS
experiment = 'test';
rootDir    = fullfile( pwd, 'data', 'vectorField' );
nLA = 4;
nLX = 4;
nLU = 40; 
ifMu = true;
epsilon    = 3E-4; % 128k 

%% SCRIPT EXCECUTION OPTIONS
ifRead            = true;
ifCalcKoop        = false;
ifPlotEig         = false;

%% PLOT PARAMETERS
figWidth   = 3;       % in inches
deltaX     = 0.5;
deltaX2    = 0.5;
deltaY     = 0.6;
deltaY2    = 0.1;
gapX       = 0.2;
gapY       = 0.2;
figVisible = 'on';
figRes     = 300;
pR = .025;

%% BUILD NLSA MODEL, SET UP BASIC ARRAY SIZES
[ model, In ] = l96NLSAModel_den( experiment );
outDir = fullfile( rootDir, ...
                   experiment, ...
                   sprintf( 'eps_%1.3g_idxPhi%i-%i_idxG%i-%i_nZ%i', ...
                            epsilon, idxPhi( 1 ), idxPhi( end ), ...
                            idxG( 1 ), idxG( 2 ), nZ ) );

%% READ DATA FROM MODEL
if ifRead
    tic
    disp( 'Time series and eigenfunction data')
    s = getSrcData( model );
    s = s( :, In.nXB + 1 : end - In.nXA );
    nD = size( x, 1 );  
    nS = size( x, 2 );
    [ phi, muA, etaA ] = getDiffusionEigenfunctions( model, [], [], [], 'ifMu', ifMu ); 
    %eta = - log( eta );
    eta = 1 - eta;
    eta = eta / eta( 2 );
    etaNorm = eta';
    etaNorm( 1 ) = 1;
end

%% EIGENVALUE PROBLEM FOR VECTOR FIELD
if ifCalcPsi
    tic
    disp( 'Vector field eigenvalue problem' )
    varPhi = bsxfun( @rdivide, phi, sqrt( etaNorm ) .^ pLap );
    dphi  = 0.5 * ( varPhi( 3 : end, : ) - varPhi( 1 : end - 2, : ) ); 
    if ifMu
        phiMu = bsxfun( @times, varPhi, mu );
        vOp = phiMu( 2 : end - 1, idxPhi )' * dphi( :, idxPhi ) /  Pars.dt;
        %B   = bsxfun( @times, phiMu( :, idxPhi ), xi  )' * varPhi( :, idxPhi );
        B = diag( 1 ./ etaNorm( idxPhi ) );
    else
        vOp = varPhi( 2 : end - 1, idxPhi )' * dphi( :, idxPhi );
        B   = varPhi( :, idxPhi )' * varPhi( :, idxPhi );
    end

    %vOp = .5 * (vOp - vOp' );
    vOp_reg = A * vOp - epsilon * diag( [ 0 ones( 1, numel( idxPhi ) - 1 ) ] ) ;
    %vOp_reg = vOp + epsilon * vOp' * vOp;

%    [ c, lambda ] = eig( vOp_reg, B + epsilon * diag( [ 0 ones( 1, numel( idxPhi ) - 1 ) ] ) );
    [ c, lambda ] = eig( vOp_reg, B );
    psiNorm = sum( bsxfun( @rdivide, abs( c ) .^ 2, ( etaNorm( idxPhi ) .^ pLap )' ), 1 );
    c = bsxfun( @rdivide, c, sqrt( psiNorm ) );
    lambda = diag( lambda );
    E = min( 1, eta );
    E( 1 ) = 0;
    E = sqrt( sum( bsxfun( @times, abs( c ) .^ 2, E( idxPhi ) ), 1 ) );
    [ E, idxE ] = sort( E, 'ascend' );
    lambda = lambda( idxE );
    omega = imag( lambda );
    c = c( :, idxE );
    psiNorm = psiNorm( idxE );
    psi = varPhi( :, idxPhi  ) *  c;
end

%% COMPUTE GROUP OF VECTOR FIELD EIGENFUNCTIONS FROM GENERATORS
if ifCalcZ
    disp( 'Basis function calculation' )
    tic
    switch modeZ
        case 'power'
            p = zeros( nZTot, nG );
            omegaZ = zeros( nZTot, 1 );
            Z = zeros( nS, nZTot );

            p( 1, : ) = - nZ;
            for iZ = 1 : nZTot
                if ifZetaNorm
                    z = prod( bsxfun( @power, psi( :, idxG ) ...
                      ./ abs( psi( :, idxG ) ), p( iZ, : ) ), 2 );
                else
                    z = prod( bsxfun( @power, psi( :, idxG ), p( iZ, : ) ), 2 );
                    zNorm = sqrt( sum( abs( z ) .^ 2 .* mu ) );
                    z = z / zNorm;
                end
                Z( :, iZ ) = z;
                omegaZ( iZ ) = sum( p( iZ, : ) .* omega( idxG )' );  
                if iZ < nZTot
                    p( iZ + 1, : ) = countOne( p( iZ, : ), nZ );
                end
            end
        case 'direct'
            Z = psi( :, idxG );
            omegaZ = omega( idxG );
    end
    toc
end


%% PLOT RECONSTRUCTED RENORMALIZED VECTOR FIELD
if ifPlotZ
    nTileX = size( idxZPlot, 1 );
    nTileY = size( idxZPlot, 2 );
    panelX = ( figWidth - deltaX - deltaX2 - ( nTileX -1 ) * gapX ) / nTileX;
    panelY = panelX;

    posn     = [ 0, ...
                 0, ...
                 nTileX * panelX + ( nTileX - 1 ) * gapX + deltaX + deltaX2, ...
                 nTileY * panelY + ( nTileY - 1 ) * gapY + deltaY + deltaY2 ];

    fig = figure( 'visible', figVisible, ...
                  'units', 'inches', ...
                  'paperPosition', posn, ...
                  'position', posn, ...
                  'defaultAxesNextPlot', 'add', ...
                  'defaultAxesBox', 'on', ...
                  'defaultAxesFontSize', 8, ...
                  'defaultTextFontSize', 8, ...
                  'defaultAxesTickDir', 'out', ...
                  'defaultAxesTickLength', [ 0.02 0 ], ...
                  'defaultAxesFontName', 'Helvetica', ...
                  'defaultTextFontName', 'Helvetica', ...
                  'defaultAxesLineWidth', 1, ...
                  'defaultLineLineWidth', .25, ...
                  'defaultAxesLayer', 'top' );

    ax = zeros( nTileX, nTileY );
    for iAx = 1 : nTileX
        for jAx = 1 : nTileY
            ax( iAx, jAx ) = axes( 'units', 'inches', ...
                                   'position', [ deltaX + ( iAx - 1 ) * ( panelX + gapX ), ...
                                    deltaY + ( nTileY - jAx ) * ( panelY + gapY ), ...
                                    panelX, panelY ] );
        end
    end
    

    pX = [ theta( 1, : ); theta( 1, : ) + pR; theta( 1, : ) + pR; theta( 1, : )   ];
    pY = [ theta( 2, : ); theta( 2, : ); theta( 2, : ) + pR; theta( 2, : ) + pR  ];


    for iTileY = 1 : nTileY
        for iTileX = 1 : nTileX
            iZ = find( all( bsxfun( @eq, p, idxZPlot{ iTileX, iTileY } ), 2 ), ...
            1, 'first' );
            axes( ax( iTileX, iTileY ) )
            h = patch( pX / pi, pY / pi, repmat( real( Z( :, iZ ).' ), [ 4 1 ] ) );
            set( gca, 'xLim', [ 0 2 ], ...
                      'yLim', [ 0 2 ], ...
                      'cLim', [ -1 1 ], ...
                      'tickDir', 'out' )
            set( h, 'edgeColor', 'none' )
            if iTileX == 1
                ylabel( '\theta_2/\pi' )
            else
                set( gca, 'yTickLabel', [] )
            end
            if iTileY == nTileY
                xlabel( '\theta_1/\pi' )
            else
                set( gca, 'xTickLabel', [] )
            end
            title( [ 'z_{' int2str( p( iZ, 1 ) ) int2str( p( iZ, 2 ) ), '}' ] )
        end
    end
    %            hC = colorbar( 'eastOutside' );
    %            if iT == 1
    %                cPos = get( hC, 'position' );
    %                cPos( 1 ) = cPos( 1 ) + cPosShit;
    %                cPos( 3 ) = cPos( 3 ) * cPosScl;
    %            end
    %            set( hC, 'position', cPos )
    %            set( ax, 'position', axPos )
    %            drawnow
               %    print( '-depsc2', 'trial.eps' )

    outFile = fullfile( outDir, [ 'figZ_' int2str( p( iZ, 1 ) ) ...
                                  '_' int2str( p( iZ, 2 ) ) '.eps' ] );
    if ~isdir( outDir )
        mkdir( outDir )
    end
    print( fig, outFile, '-depsc2', [ '-r' int2str( figRes ) ] )
end


%% PLOT RECONSTRUCTED RENORMALIZED VECTOR FIELD
if ifPlotZR3
    nTileX = numel( idxZPlot );
    nTileY = 3;
    panelX = ( figWidth - deltaX - deltaX2 - ( nTileX -1 ) * gapX ) / nTileX;
    panelY = panelX;

    posn     = [ 0, ...
                 0, ...
                 nTileX * panelX + ( nTileX - 1 ) * gapX + deltaX + deltaX2, ...
                 nTileY * panelY + ( nTileY - 1 ) * gapY + deltaY + deltaY2 ];

    fig = figure( 'visible', figVisible, ...
                  'units', 'inches', ...
                  'paperPosition', posn, ...
                  'position', posn, ...
                  'defaultAxesNextPlot', 'add', ...
                  'defaultAxesBox', 'on', ...
                  'defaultAxesFontSize', 8, ...
                  'defaultTextFontSize', 8, ...
                  'defaultAxesTickDir', 'out', ...
                  'defaultAxesTickLength', [ 0.01 0 ], ...
                  'defaultAxesFontName', 'Helvetica', ...
                  'defaultTextFontName', 'Helvetica', ...
                  'defaultAxesLineWidth', 1, ...
                  'defaultLineLineWidth', 1, ...
                  'defaultAxesLayer', 'top' );

    ax = zeros( nTileX, nTileY );
    for iAx = 1 : nTileX
        for jAx = 1 : nTileY
            ax( iAx, jAx ) = axes( 'units', 'inches', ...
                                   'position', [ deltaX + ( iAx - 1 ) * ( panelX + gapX ), ...
                                    deltaY + ( nTileY - jAx ) * ( panelY + gapY ), ...
                                    panelX, panelY ] );
        end
    end
    

    pR = (1./q').^.25/30;
    pX = [ x( 1, : ); x( 1, : ) + pR; x( 1, : ) + pR; x( 1, : ) + pR   ];
    pY = [ x( 2, : ); x( 2, : );      x( 2, : ) + pR; x( 2, : ) + pR  ];
    pZ = [ x( 3, : ); x( 3, : );      x( 3, : );      x( 3, : ) + pR  ];
    pX = [ pX; x( 1, : );       x( 1, : ) + pR; x( 1, : );     x( 1, : ) ];
    pY = [ pY; x( 2, : ) + pR;  x( 2, : );      x( 2, : );     x( 2, : ) + pR ];
    pZ = [ pZ; x( 3, : ) + pR;  x( 3, : ) + pR; x( 3, : ) + pR; x( 3, : ) ];


    t = ( idxTPlot - 1 ) * Pars.dt;
    for iZ = 1 : numel( idxZPlot )
        iZPlot = find( all( bsxfun( @eq, p, idxZPlot{ iZ } ), 2 ), ...
                    1, 'first' );
        pC = repmat( real( Z( :, iZPlot ) ).', [ 8 1 ] );
        axes( ax( 1, iZ ) )
        h = patch( pX, pY, pZ, pC  );
        set( gca, 'zLim', [ -.7, .7 ], ...
                  'xLim', [ -1.7 1.7 ], ...
                  'yLim', [ -1.7 1.7 ], ...
                  'cLim', [ -1 1 ], ...
                  'tickDir', 'out' )
        set( h, 'edgeColor', 'none' )
        view( 30, 80 )
        axis off
        %xlabel( 'x' )
        %ylabel( 'y' )
        text( -.9, -3.3, titleStr{ iZ } )

        axes( ax( 2, iZ ) )
        plot( t, real( Z( idxTPlot, iZPlot ) ), 'color',  [ 17 83 166 ] / 255 )
        plot( t, imag( Z( idxTPlot, iZPlot ) ), 'color', [ 255 129 1 ] / 255 )
        if iZ == nTileY
            xlabel( 't' )
        else
            set( gca, 'xTickLabel', [] )
        end
        if iZ == 1
            hL = legend( 'Re(z)', 'Im(z)', 'location', 'northwest' );
            legend boxoff
            lPos = get( hL, 'position' );
            lPos( 3 ) = .5 * lPos( 3 );
            set( hL, 'position', lPos )
        end
        set( gca, 'xLim', [ t( 1 ) t( end ) ] )
        %ylabel( [ 'z', int2str( idxZPlot{ iZ } ) ] )

        axes( ax( 3, iZ ) )
        plot( Z( :, iZPlot ), 'color', [ 17 83 166 ] / 255 )
        if iZ == nTileY
            xlabel( 'Re(z)' )
        else
            set( gca, 'xTickLabel', [] )
        end
        ylabel ( 'Im(z)' )
        set( gca, 'yAxis', 'right' )
    end
    %outFile = fullfile( outDir, [ 'figZR3_' int2str( p( iZ, 1 ) ) ...
    %                              '_' int2str( p( iZ, 2 ) ) '.eps' ] );
    outFile = fullfile( outDir, 'figZR3.eps' );
    if ~isdir( outDir )
        mkdir( outDir )
    end
    print( fig, outFile, '-depsc2', [ '-r' int2str( figRes ) ] )

end


if ifPlotRaw
    nTileX = 1;
    nTileY = numel( idxXPlot );
    panelX = ( figWidth - deltaX - deltaX2 - ( nTileX -1 ) * gapX ) / nTileX;
    panelY = panelX;

    posn     = [ 0, ...
                 0, ...
                 nTileX * panelX + ( nTileX - 1 ) * gapX + deltaX + deltaX2, ...
                 nTileY * panelY + ( nTileY - 1 ) * gapY + deltaY + deltaY2 ];

    fig = figure( 'visible', figVisible, ...
                  'units', 'inches', ...
                  'paperPosition', posn, ...
                  'position', posn, ...
                  'defaultAxesNextPlot', 'add', ...
                  'defaultAxesBox', 'on', ...
                  'defaultAxesFontSize', 8, ...
                  'defaultTextFontSize', 8, ...
                  'defaultAxesTickDir', 'out', ...
                  'defaultAxesTickLength', [ 0.01 0 ], ...
                  'defaultAxesFontName', 'Helvetica', ...
                  'defaultTextFontName', 'Helvetica', ...
                  'defaultAxesLineWidth', 1, ...
                  'defaultLineLineWidth', 1, ...
                  'defaultAxesLayer', 'top' );

    ax = zeros( nTileX, nTileY );
    for iAx = 1 : nTileX
        for jAx = 1 : nTileY
            ax( iAx, jAx ) = axes( 'units', 'inches', ...
                                   'position', [ deltaX + ( iAx - 1 ) * ( panelX + gapX ), ...
                                    deltaY + ( nTileY - jAx ) * ( panelY + gapY ), ...
                                    panelX, panelY ] );
        end
    end
    

    t = ( idxTPlot - 1 ) * Pars.dt;
    for iX = 1 : numel( idxXPlot )
        axes( ax( iX ) )
        plot( t, x( idxXPlot( iX ), idxTPlot ), 'color',  [ 17 83 166 ] / 255 )
        if iX == numel( idxXPlot )
        xlabel( 't' )
        else
            set( gca, 'xTickLabel', [] )
        end
        set( gca, 'xLim', [ t( 1 ) t( end ) ] )
        ylabel( [ 'x', int2str( idxXPlot( iX  ) ) ] )
    end
    outFile = fullfile( outDir, 'figX.eps' );
    if ~isdir( outDir )
        mkdir( outDir )
    end
    print( fig, outFile, '-depsc2', [ '-r' int2str( figRes ) ] )
end
