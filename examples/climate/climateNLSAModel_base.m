function [ model, In, Out ] = climateNLSAModel_base( In, Out )
% CLIMATENLSAMODEL_BASE Low-level function to build NLSA models for climate 
%  datasets
%
%  [ model, In ] = climateNLSAModel_base( In ) builds an NLSA model based on 
%  the model parameters specified in the structure In. 
%
%  [ model, In, Out ] = climateNLSAModel_base( In, Out ) builds an NLSA model
%  with support for out-of-sample (test) data. The model parameters for the
%  in-sample (training) and out-of-sample (test) data are specified in the 
%  structure In and Out. 
%
%  climateNLSAModel_base converts the parameter values in In and Out into 
%  appropriate arguments for the nlsaModel class constructors, and then calls
%  the constructors to build the model.
%
%  climateNLSAModel_base is meant to be called by higher-level functions 
%  tailored to specific climate datasets. 
%
%  For additional information on the class constructors see 
%
%      /nlsa/classes/nlsaModel_base/nlsaModel_base.m
%      /nlsa/classes/nlsaModel/nlsaModel.m
%      /nlsa/classes/nlsaModel_den/nlsaModel_den.m
%      /nlsa/classes/nlsaModel_den_ose/nlsaModel_den_ose.m
%
%  Structure field Src represents different physical variables (e.g., SST) 
%  employed in the kernel definition
%
%  Structure field Res represents different realizations (ensemble members)
%
% Modified 2020/03/26
 
%% PRELIMINARY CHECKS
% Check number of input arguments, and if we are doing out-of-sample extension
if nargin == 1
    Out   = [];
    ifOse = false; 
elseif nargin == 2
    ifOse = true;
else 
    error( 'Invalid number of input arguments.' )
end

% Check if we are using kernel density estimation
if isfield( In, 'denType' )
    ifDen = true;
else
    ifDen = false;
end

% Check that required high-level fields are present
if ~isfield( In, 'Src' )
    error( 'Source field Src missing from in-sample parameters.' )
end
if ~isfield( In, 'Res' )
    error( 'Realization field Res missing from in-sample parameters.' )
end
if ifOse && ~isfield( Out, 'Res' )
    warning( [ 'Realization field Res missing from  out-of-sample ' ...
               'parameters. Reverting to default from in-sample data.' ] )
end


%% ROOT DIRECTORY NAMES

% In-sample data
if isfield( In, 'dataPath' )
    inPath = In.dataPath;
else
    inPath      = fullfile( pwd, 'data/raw' ); 
    In.dataPath = inPath;
end

% Out-of-sample data
if isfield( Out, 'dataPath' )
    outPath = Out.dataPath;
else
    outPath      = fullfile( pwd, 'data/raw' );
    Out.dataPath = outPath;
end

% NLSA output
if isfield( In, 'nlsaPath' )
    nlsaPath = In.nlsaPath;
else
    nlsaPath = fullfile( pwd, 'data/nlsa' ); % nlsa output
    In.nlsaPath = nlsaPath;
end

%% ABBREVIATED SOURCE AND TARGET COMPONENT NAMES
componentNames = {};
if isfield( In, 'sourceComponentName' )
    componentNames = [ componentNames ...
                       'sourceComponentName' In.sourceComponentName ];
end
if isfield( In, 'targetComponentName' )
    componentNames = [ componentNames ...
                       'targetComponentName' In.targetComponentName ];
end

%% DELAY-EMBEDDING ORIGINGS
In.nC  = numel( In.Src ); % number of source components
In.nCT = numel( In.Trg ); % number of target compoents

% Maximum number of delay embedding lags, sample left out in the 
% beginning/end of the analysis interval for source data
In.nE = In.Src( 1 ).idxE( end ); 
In.nXB = In.Src( 1 ).nXB; 
In.nXA = In.Src( 1 ).nXA;
for iC = 2 : In.nC
    In.nE = max( In.nE, In.Src( iC ).idxE( end ) );
    In.nXB = max( In.nXB, In.Src( iC ).nXB );
    In.nXA = max( In.nXA, In.Src( iC ).nXA );
end

% Maximum number of delay embedding lags, sample left out in the 
% beginning/end of the analysis interval for targe data
nETMin  = In.Trg( 1 ).idxE( end ); % minimum number of delays for target data
In.nET  = In.Trg( 1 ).idxE( end ); % maximum number of delays for target data
In.nXBT = In.Trg( 1 ).nXB;
In.nXAT = In.Trg( 1 ).nXA;
for iC = 2 : In.nCT
    In.nET = max( In.nET, In.Trg( iC ).idxE( end ) );
    nETMin = min( In.nET, In.Trg( iC ).idxE( end ) );
    In.nXBT = min( In.nXBT, In.Trg( iC ).nXB );
    In.nXAT = min( In.nXAT, In.Trg( iC ).nXA );
end
nEMax = max( In.nE, In.nET );
nXBMax = max( In.nXB, In.nXBT );
nXAMax = max( In.nXA, In.nXAT );

%% NUMBER OF STAMPLES FOR IN-SAMPLE DATA
In.nR  = numel( In.Res ); % number of realizations, in-sample data
% Determine number of samples for in-sample data.
nSETot = 0;
idxT1 = zeros( 1, In.nR );
tNum  = cell( 1, In.nR );
for iR = In.nR : -1 : 1
    % In.Res( iR ).tNum:      timestemps (e.g., Matlab serial date numbers)
    % In.Res( iR ).nS:    number of samples
    % In.Res( iR ).idxT1: time origin for delay embedding
    % In.Res( iR ).nSE:   number of samples after delay embedding
    % In.Res( iR ).nSRec: number of samples for reconstruction
    In.Res( iR ).nS = numel( In.Res( iR ).tNum ); 
    In.Res( iR ).idxT1 = nEMax + nXBMax;      
    In.Res( iR ).nSE = In.Res( iR ).nS - In.Res( iR ).idxT1 + 1 - nXAMax; 
    nSETot = nSETot + In.Res( iR ).nSE;
    In.Res( iR ).nSRec = In.Res( iR ).nSE + nETMin - 1; 
    idxT1( iR ) = In.Res( iR ).idxT1;
    tNum{ iR } = In.Res( iR ).tNum;
end
if In.nN == 0
   In.nN = nSETot;
end 
if In.nNS == 0
    In.nNS = nSETot;
end

%% OUT-OF-SAMPLE PARAMETER VALUES INHERITED FROM IN-SAMPLE DATA
if ifOse
    Out.tFormat      = In.tFormat; 
    Out.nC           = In.nC;  % number of source components
    Out.nCT          = In.nCT; % number of target components
    Out.Src          = In.Src; % source component specification
    Out.Trg          = In.Trg; % target component specification
    Out.nE           = In.nE;  % number of delays for source data
    Out.nET          = In.nET; % number of delays for target data
    Out.nXB          = In.nXB; % left-out source samples before main interval
    Out.nXA          = In.nXA; % left-out source samples after main interval
    Out.nXBT         = In.nXBT; % left-out target samples before main interval
    Out.nXAT         = In.nXAT; % left-out target samples after main interval 
    Out.lDist        = In.lDist; % local distance function
    Out.tol          = In.tol; % cone kernel tolerance
    Out.zeta         = In.zeta; % cone kernel parameter zeta 
    Out.coneAlpha    = In.coneAlpha; % cone kernel parameter alpha 
    Out.diffOpType   = In.diffOpType; % diffusion operator type
    Out.alpha        = In.alpha; % diffusion maps parameter alpha
    Out.nN           = In.nN; % nearest neighbors for OSE pairwise distance 
    Out.nNO          = Out.nN; % nearest neighbors for OSE diffusion operator
    Out.epsilon      = 1; % Bandwidth parameter
    Out.nPhi         = In.nPhi; % diffusion eigenfunctions to compute
    Out.nNO          = In.nN; % number of nearest neighbors for OSE 
    Out.idxPhiRecOSE = In.idxPhiRec; % eigenfunctions to reconstruct
end

if ifOse && ifDen
    Out.denType      = In.denType; % density estimation type
    Out.denLDist     = In.denLDist; % local distance for density estimation
    Out.denZeta      = In.denZeta; % cone kernel parameter zeta
    Out.denConeAlpha = In.denConeAlpha; % cone kernel paramter alpha
    Out.denNN        = In.denNN; % nearest neighbors for KDE
    Out.denND        = In.denND; % manifold dimension for density estimation
    Out.denEpsilon   = In.denEpsilon; % bandwidth parmeter for KDE
end


%% NUMBER OF SAMPLES AND TIMESTAMPS FOR OUT-OF-SAMPLE DATA
if ifOse
    Out.nR  = numel( Out.Res ); % number of realizations, out-of-sample data
    idxT1O = zeros( 1, Out.nR );
    tNumO  = cell( 1, Out.nR );
    % Determine number of samples for out-of-sample data.
    for iR = Out.nR : -1 : 1
        % Out.Res( iR ).tNum:  timestemps (e.g., Matlab serial date numbers)
        % Out.Res( iR ).nS:    number of samples
        % Out.Res( iR ).idxT1: time origin for delay embedding
        % Out.Res( iR ).nSE:   number of samples after delay embedding
        % Out.Res( iR ).nSRec: number of samples for reconstruction
        Out.Res( iR ).nS = numel( Out.Res( iR ).tNum );
        Out.Res( iR ).idxT1 = nEMax + nXBMax; 
        Out.Res( iR ).nSE = Out.Res( iR ).nS - Out.Res( iR ).idxT1 + 1-nXAMax; 
        Out.Res( iR ).nSERec = Out.Res( iR ).nSE + nETMin - 1; 
        idxT1O( iR ) = Out.Res( iR ).idxT1;
        tNumO{ iR } = Out.Res( iR ).tNum;
    end
end

%% IN-SAMPLE DATA COMPONENTS
fList = nlsaFilelist( 'file', 'dataX.mat' ); % filename for source data

% Loop over realizations for in-sample data
for iR = In.nR : -1 : 1

    tStr = [ In.Res( iR ).tLim{ 1 } '-' In.Res( iR ).tLim{ 2 } ]; 
    tagR = [ In.Res( iR ).experiment '_' tStr ];
                                    
    % Source data assumed to be stored in a single batch
    partition = nlsaPartition( 'nSample', In.Res( iR ).nS ); 
    embPartition( iR ) = nlsaPartition( 'nSample', In.Res( iR ).nSE, ...
                                        'nBatch',  In.Res( iR ).nB  );
    recPartition( iR ) = nlsaPartition( 'nSample', In.Res( iR ).nSRec, ...
                                        'nBatch',  In.Res( iR ).nBRec );

    % Loop over source components
    for iC = In.nC : -1 : 1

        xyStr = sprintf( 'x%i-%i_y%i-%i', In.Src( iC ).xLim( 1 ), ...
                                          In.Src( iC ).xLim( 2 ), ...
                                          In.Src( iC ).yLim( 1 ), ...
                                          In.Src( iC ).yLim( 2 ) );

        pathC = fullfile( inPath,  ...
                          In.Res( iR ).experiment, ...
                          In.Src( iC ).field,  ...
                          [ xyStr '_' tStr ] );
                                                   
        tagC = [ In.Src( iC ).field '_' xyStr ];

        load( fullfile( pathC, 'dataGrid.mat' ), 'nD' )
        
        srcComponent( iC, iR ) = nlsaComponent( ...
                                    'partition',      partition, ...
                                    'dimension',      nD, ...
                                    'path',           pathC, ...
                                    'file',           fList, ...
                                    'componentTag',   tagC, ...
                                    'realizationTag', tagR  );

    end

    % Loop over target components 
    for iC = In.nCT : -1 : 1

        xyStr = sprintf( 'x%i-%i_y%i-%i', In.Trg( iC ).xLim( 1 ), ...
                                          In.Trg( iC ).xLim( 2 ), ...
                                          In.Trg( iC ).yLim( 1 ), ...
                                          In.Trg( iC ).yLim( 2 ) );

        pathC = fullfile( inPath,  ...
                          In.Res( iR ).experiment, ...
                          In.Trg( iC ).field,  ...
                          [ xyStr '_' tStr ] );
                                                   
        tagC = [ In.Trg( iC ).field '_' tStr ];


        load( fullfile( pathC, 'dataGrid.mat' ), 'nD'  )

        trgComponent( iC, iR ) = nlsaComponent( ...
                                    'partition',      partition, ...
                                    'dimension',      nD, ...
                                    'path',           pathC, ...
                                    'file',           fList, ...
                                    'componentTag',   tagC, ...
                                    'realizationTag', tagR  );
    end

end

% Loop over source components to create embedding templates
for iC = In.nC : -1 : 1
    switch In.Src( iC ).embFormat
        case 'evector'
            if In.Src( iC ).fdOrder <= 0
                embComponent( iC, 1 ) = nlsaEmbeddedComponent( ...
                                    'idxE',    In.Src( iC ).idxE, ... 
                                    'nXB',     In.Src( iC ).nXB, ...
                                    'nXA',     In.Src( iC ).nXA );
            else
                embComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_e( ...
                                    'idxE',    In.Src( iC ).idxE, ... 
                                    'nXB',     In.Src( iC ).nXB, ...
                                    'nXA',     In.Src( iC ).nXA, ...
                                    'fdOrder', In.Src( iC ).fdOrder, ...
                                    'fdType',  In.Src( iC ).fdType );
            end
        case 'overlap'
            if In.Src( iC ).fdOrder <= 0
                embComponent( iC, 1 ) = nlsaEmbeddedComponent_o( ...
                                    'idxE',    In.Src( iC ).idxE, ...
                                    'nXB',     In.Src( iC ).nXB, ...
                                    'nXA',     In.Src( iC ).nXA );
            else
                embComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_o( ...
                                    'idxE',    In.Src( iC ).idxE, ...
                                    'nXB',     In.Src( iC ).nXB, ...
                                    'nXA',     In.Src( iC ).nXA, ...
                                    'fdOrder', In.Src( iC ).fdOrder, ...
                                    'fdType',  In.Src( iC ).fdType );
            end
    end
end

% Loop over target components to create embedding templates
for iC = In.nCT : -1 : 1
    switch In.Trg( iC ).embFormat
        case 'evector'
            if In.Trg( iC ).fdOrder <= 0
                trgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_e( ...
                                      'idxE',    In.Trg( iC ).idxE, ... 
                                      'nXB',     In.Trg( iC ).nXB, ...
                                      'nXA',     In.Trg( iC ).nXA );
            else
                trgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_e( ...
                                      'idxE',    In.Trg( iC ).idxE, ... 
                                      'nXB',     In.Trg( iC ).nXB, ...
                                      'nXA',     In.Trg( iC ).nXA, ...
                                      'fdOrder', In.Trg( iC ).fdOrder, ...
                                      'fdType',  In.Trg( iC ).fdType );
             end
        case 'overlap'
            if In.Trg( iC ).fdOrder <= 0 
                trgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_o( ...
                                       'idxE',    In.Trg( iC ).idxE, ...
                                       'nXB',     In.Trg( iC ).nXB, ...
                                       'nXA',     In.Trg( iC ).nXA );
            else
                trgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_o( ...
                                       'idxE',    In.Trg( iC ).idxE, ...
                                       'nXB',     In.Trg( iC ).nXB, ...
                                       'nXA',     In.Trg( iC ).nXA, ...
                                       'fdOrder', In.Trg( iC ).fdOrder, ...
                                       'fdType',  In.Trg( iC ).fdType );
            end
    end
end


%% PROJECTED COMPONENTS
for iC = In.nCT : -1 : 1
    if isa( trgEmbComponent( iC, 1 ), 'nlsaEmbeddedComponent_xi' )
        prjComponent( iC ) = nlsaProjectedComponent_xi( ...
                             'nBasisFunction', In.nPhiPrj );
    else
        prjComponent( iC ) = nlsaProjectedComponent( ...
                             'nBasisFunction', In.nPhiPrj );
    end
end

%% OUT-OF-SAMPLE DATA COMPONENTS 
if ifOse
    fList = nlsaFilelist( 'file', 'dataX.mat' ); % filename for source data
    for iR = Out.nR : -1 : 1

        tStr = [ Out.Res( iR ).tLim{ 1 } '-' Out.Res( iR ).tLim{ 2 } ];
        tagR = [ Out.Res( 1 ).experiment '_' tStr ];

        % Source data assumed to be stored in a single batch
        partition = nlsaPartition( 'nSample', Out.Res( iR ).nS ); 
        outEmbPartition( iR ) = nlsaPartition( ...
                                    'nSample', Out.Res( iR ).nSE, ...
                                    'nBatch',  Out.Res( iR ).nB  );
        oseRecPartition( iR ) = nlsaPartition( ...
                                    'nSample', Out.Res( iR ).nSERec, ...
                                    'nBatch',  Out.Res( iR ).nBRec ); 

        % Loop over out-of-sample source components
        for iC = Out.nC : -1 : 1

            xyStr = sprintf( 'x%i-%i_y%i-%i', Out.Src( iC ).xLim( 1 ), ...
                                              Out.Src( iC ).xLim( 2 ), ...
                                              Out.Src( iC ).yLim( 1 ), ...
                                              Out.Src( iC ).yLim( 2 ) );

            pathC = fullfile( outPath,  ...
                              Out.Res( iR ).experiment, ...
                              Out.Src( iC ).field,  ...
                              [ xyStr '_' tStr ] );

            tagC = [ Out.Src( iC ).field '_' xyStr ];

            % number of gridpoints
            load( fullfile( pathC, 'dataGrid.mat' ), 'nD' ) 

            outComponent( iC, iR ) = nlsaComponent( ...
                                        'partition',      partition, ...
                                        'dimension',      nD, ...
                                        'path',           pathC, ...
                                        'file',           fList, ...
                                        'componentTag',   tagC, ...
                                        'realizationTag', tagR  );
        end

        % Loop over out-of-sample target components
        for iC = Out.nCT : -1 : 1

            xyStr = sprintf( 'x%i-%i_y%i-%i', Out.Trg( iC ).xLim( 1 ), ...
                                              Out.Trg( iC ).xLim( 2 ), ...
                                              Out.Trg( iC ).yLim( 1 ), ...
                                              Out.Trg( iC ).yLim( 2 ) );

            pathC = fullfile( outPath,  ...
                              Out.Res( iR ).experiment, ...
                              Out.Trg( iC ).field,  ...
                              [ xyStr '_' tStr ] );

            tagC = [ Out.Trg( iC ).field '_' xyStr ];

            % number of gridpoints
            load( fullfile( pathC, 'dataGrid.mat' ), 'nD' ) 

            outTrgComponent( iC, iR ) = nlsaComponent( ...
                                            'partition',      partition, ...
                                            'dimension',      nD, ...
                                            'path',           pathC, ...
                                            'file',           fList, ...
                                            'componentTag',   tagC, ...
                                            'realizationTag', tagR  );
        end
    end
       
    % Loop over out-of-sample source components to create embedding templates
    for iC = Out.nC : -1 : 1
        switch Out.Src( iC ).embFormat
            case 'evector'
                if Out.Src( iC ).fdOrder <= 0
                    outEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_e( ...
                                            'idxE',    Out.Src( iC ).idxE, ... 
                                            'nXB',     Out.Src( iC ).nXB, ...
                                            'nXA',     Out.Src( iC ).nXA );
                else
                    outEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_e( ...
                                        'idxE',    Out.Src( iC ).idxE, ... 
                                        'nXB',     Out.Src( iC ).nXB, ...
                                        'nXA',     Out.Src( iC ).nXA, ...
                                        'fdOrder', Out.Src( iC ).fdOrder, ...
                                        'fdType',  Out.Src( iC ).fdType );
                end
            case 'overlap'
                if Out.Src( iC ).fdOrder <= 0
                    outEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_o( ...
                                            'idxE',    Out.Src( iC ).idxE, ...
                                            'nXB',     Out.Src( iC ).nXB, ...
                                            'nXA',     Out.Src( iC ).nXA );
                else

                    outEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_xi_o( ...
                                        'idxE',    Out.Src( iC ).idxE, ...
                                        'nXB',     Out.Src( iC ).nXB, ...
                                        'nXA',     Out.Src( iC ).nXA, ...
                                        'fdOrder', Out.Src( iC ).fdOrder, ...
                                        'fdType',  Out.Src( iC ).fdType );
                end
        end
    end

    
    % Loop over out-of-sample target components to create embedding templates
    for iC = Out.nCT : -1 : 1
        switch Out.Trg( iC ).embFormat
            case 'evector'
                if Out.Trg( iC ).fdOrder <= 0
                    outTrgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_e( ...
                                      'idxE',    Out.Trg( iC ).idxE, ... 
                                      'nXB',     Out.Trg( iC ).nXB, ...
                                      'nXA',     Out.Trg( iC ).nXA );
                else
                    outTrgEmbComponent( iC, 1 ) ...
                                = nlsaEmbeddedComponent_xi_e( ...
                                      'idxE',    Out.Trg( iC ).idxE, ... 
                                      'nXB',     Out.Trg( iC ).nXB, ...
                                      'nXA',     Out.Trg( iC ).nXA, ...
                                      'fdOrder', Out.Trg( iC ).fdOrder, ...
                                      'fdType',  Out.Trg( iC ).fdType );
                 end
            case 'overlap'
                if Out.Trg( iC ).fdOrder <= 0
                    outTrgEmbComponent( iC, 1 ) = nlsaEmbeddedComponent_o( ...
                                       'idxE',    Out.Trg( iC ).idxE, ...
                                       'nXB',     Out.Trg( iC ).nXB, ...
                                       'nXA',     Out.Trg( iC ).nXA );
                else
                    outTrgEmbComponent( iC, 1 ) = ...
                                nlsaEmbeddedComponent_xi_o( ...
                                       'idxE',    Out.Trg( iC ).idxE, ...
                                       'nXB',     Out.Trg( iC ).nXB, ...
                                       'nXA',     Out.Trg( iC ).nXA, ...
                                       'fdOrder', Out.Trg( iC ).fdOrder, ...
                                       'fdType',  Out.Trg( iC ).fdType );
                end
        end
    end
end

% Select mode for pairwise distances based on embeddding format
if all( strcmp( { In.Src.embFormat }, 'overlap' ) )
    modeStr = 'implicit';
else
    modeStr = 'explicit';
end


%% PAIRWISE DISTANCE FOR DENSITY ESTIMATION FOR IN-SAMPLE DATA
if ifDen
    switch In.denLDist
        case 'l2' % L^2 distance
            denLDist = nlsaLocalDistance_l2( 'mode', modeStr );

        case 'at' % "autotuning" NLSA kernel
            denLDist = nlsaLocalDistance_at( 'mode', modeStr );

        case 'cone' % cone kernel
            denLDist = nlsaLocalDistance_cone( 'mode',      modeStr, ...
                                               'zeta',      In.denZeta, ...
                                               'tolerance', In.tol, ...
                                               'alpha',     In.denConeAlpha );
    end

    denDFunc = nlsaLocalDistanceFunction( 'localDistance', denLDist );

    denPDist = nlsaPairwiseDistance( 'nearestNeighbors', In.nN, ...
                                     'distanceFunction', denDFunc );

    denPDist = repmat( denPDist, [ In.nC 1 ] );
end

%% PAIRWISE DISTANCE FOR DENSITY ESTIMATION FOR OUT-OF-SAMPLE
if ifDen && ifOse
    switch Out.denLDist
        case 'l2' % L^2 distance
            denLDist = nlsaLocalDistance_l2( 'mode', modeStr );

        case 'at' % "autotuning" NLSA kernel
            denLDist = nlsaLocalDistance_at( 'mode', modeStr );

        case 'cone' % cone kernel
            denLDist = nlsaLocalDistance_cone( 'mode',      modeStr, ...
                                               'zeta',      Out.denZeta, ...
                                               'tolerance', Out.tol, ...
                                               'alpha',     Out.denConeAlpha );
    end

    denDFunc = nlsaLocalDistanceFunction( 'localDistance', denLDist );

    oseDenPDist = nlsaPairwiseDistance( 'nearestNeighbors', Out.nN, ...
                                        'distanceFunction', denDFunc );

    oseDenPDist = repmat( oseDenPDist, [ Out.nC 1 ] );
end

%% KERNEL DENSITY ESTIMATION FOR IN-SAMPLE DATA
if ifDen 
    switch In.denType
        case 'fb' % fixed bandwidth
            den = nlsaKernelDensity_fb( ...
                     'dimension',              In.denND, ...
                     'epsilon',                In.denEpsilon, ...
                     'bandwidthBase',          In.denEpsilonB, ...
                     'bandwidthExponentLimit', In.denEpsilonE, ...
                     'nBandwidth',             In.denNEpsilon );

        case 'vb' % variable bandwidth 
            den = nlsaKernelDensity_vb( ...
                     'dimension',              In.denND, ...
                     'epsilon',                In.denEpsilon, ...
                     'kNN',                    In.denNN, ...
                     'bandwidthBase',          In.denEpsilonB, ...
                     'bandwidthExponentLimit', In.denEpsilonE, ...
                     'nBandwidth',             In.denNEpsilon );
    end

    den = repmat( den, [ In.nC 1 ] );
end

%% KERNEL DENSITY ESTIMATION FOR OUT-OF-SAMPLE DATA
if ifDen && ifOse
    switch Out.denType
        case 'fb' % fixed bandwidth
            oseDen = nlsaKernelDensity_ose_fb( ...
                     'dimension',              Out.denND, ...
                     'epsilon',                Out.denEpsilon );

        case 'vb' % variable bandwidth 
            oseDen = nlsaKernelDensity_ose_vb( ...
                     'dimension',              Out.denND, ...
                     'kNN',                    Out.denNN, ...
                     'epsilon',                Out.denEpsilon );
    end


    oseDen = repmat( oseDen, [ Out.nC 1 ] );
end

%% PAIRWISE DISTANCES FOR IN-SAMPLE DATA
switch In.lDist
    case 'l2' % L^2 distance
        lDist = nlsaLocalDistance_l2( 'mode', modeStr );

    case 'at' % "autotuning" NLSA kernel
        lDist = nlsaLocalDistance_at( 'mode', modeStr ); 

    case 'cone' % cone kernel
        lDist = nlsaLocalDistance_cone( 'mode', modeStr, ...
                                        'zeta', In.zeta, ...
                                        'tolerance', In.tol, ...
                                        'alpha', In.coneAlpha );
end
if ifDen
    lScl = nlsaLocalScaling_pwr( 'pwr', 1 / In.denND );
    dFunc = nlsaLocalDistanceFunction_scl( 'localDistance', lDist, ...
                                           'localScaling', lScl );
else
    dFunc = nlsaLocalDistanceFunction( 'localDistance', lDist );
end
pDist = nlsaPairwiseDistance( 'distanceFunction', dFunc, ...
                              'nearestNeighbors', In.nN );

%% PAIRWISE DISTANCES FOR OUT-OF-SAMPLE DATA
if ifOse
    switch Out.lDist
        case 'l2' % L^2 distance
            lDist = nlsaLocalDistance_l2( 'mode', modeStr );

        case 'at' % "autotuning" NLSA kernel
            lDist = nlsaLocalDistance_at( 'mode', modeStr ); 

        case 'cone' % cone kernel
            lDist = nlsaLocalDistance_cone( 'mode', modeStr, ... 
                                            'zeta', In.zeta, ...
                                            'tolerance', In.tol, ...
                                            'alpha', In.coneAlpha );
    end

    lScl = nlsaLocalScaling_pwr( 'pwr', 1 / Out.denND );
    oseDFunc = nlsaLocalDistanceFunction_scl( 'localDistance', lDist, ...
                                              'localScaling', lScl );
    osePDist = nlsaPairwiseDistance( 'distanceFunction', oseDFunc, ...
                                     'nearestNeighbors', Out.nN );
end

%% SYMMETRIZED PAIRWISE DISTANCES
sDist = nlsaSymmetricDistance_gl( 'nearestNeighbors', In.nNS );

%% DIFFUSION OPERATOR FOR IN-SAMPLE DATA
switch In.diffOpType
    % global storage format, fixed bandwidth
    case 'gl'
        diffOp = nlsaDiffusionOperator_gl( 'alpha',          In.alpha, ...
                                           'epsilon',        In.epsilon, ...
                                           'nEigenfunction', In.nPhi );

    % global storage format, multiple bandwidth (automatic bandwidth selection)
    case 'gl_mb' 
        diffOp = nlsaDiffusionOperator_gl_mb( ...
                     'alpha',                  In.alpha, ...
                     'epsilon',                In.epsilon, ...
                     'nEigenfunction',         In.nPhi, ...
                     'bandwidthBase',          In.epsilonB, ...
                     'bandwidthExponentLimit', In.epsilonE, ...
                     'nBandwidth',             In.nEpsilon );

    % global storage format, multiple bandwidth (automatic bandwidth selection and SVD)
    case 'gl_mb_svd' 
        diffOp = nlsaDiffusionOperator_gl_mb_svd( ...
                     'alpha',                  In.alpha, ...
                     'epsilon',                In.epsilon, ...
                     'nEigenfunction',         In.nPhi, ...
                     'bandwidthBase',          In.epsilonB, ...
                     'bandwidthExponentLimit', In.epsilonE, ...
                     'nBandwidth',             In.nEpsilon );

    case 'gl_mb_bs'
        diffOp = nlsaDiffusionOperator_gl_mb_bs( ...
                     'alpha',                  In.alpha, ...
                     'epsilon',                In.epsilon, ...
                     'nEigenfunction',         In.nPhi, ...
                     'bandwidthBase',          In.epsilonB, ...
                     'bandwidthExponentLimit', In.epsilonE, ...
                     'nBandwidth',             In.nEpsilon );

end

%% DIFFUSION OPERATOR FOR OUT-OF-SAMPLE DATA
if ifOse
    switch Out.diffOpType
        case 'gl_mb_svd'
            oseDiffOp = nlsaDiffusionOperator_ose_svd( ...
                                       'alpha',          Out.alpha, ...
                                       'epsilon',        Out.epsilon, ...
                                       'epsilonT',       In.epsilon, ...
                                       'nNeighbors',     Out.nNO, ...
                                       'nNeighborsT',    In.nNS, ...
                                       'nEigenfunction', Out.nPhi );
        case 'gl_mb_bs'
            oseDiffOp = nlsaDiffusionOperator_ose_bs( ...
                                       'alpha',          Out.alpha, ...
                                       'epsilon',        Out.epsilon, ...
                                       'epsilonT',       In.epsilon, ...
                                       'nNeighbors',     Out.nNO, ...
                                       'nNeighborsT',    In.nNS, ...
                                       'nEigenfunction', Out.nPhi );

        otherwise
            oseDiffOp = nlsaDiffusionOperator_ose( ...
                                       'alpha',          Out.alpha, ...
                                       'epsilon',        Out.epsilon, ...
                                       'epsilonT',       In.epsilon, ...
                                       'nNeighbors',     Out.nNO, ...
                                       'nNeighborsT',    In.nNS, ...
                                       'nEigenfunction', Out.nPhi );
    end
end
 

%% LINEAR MAP FOR SVD OF TARGET DATA
linMap = nlsaLinearMap_gl( 'basisFunctionIdx', In.idxPhiSVD );


%% RECONSTRUCTED TARGET COMPONENTS -- IN-SAMPLE DATA
% Reconstructed data from diffusion eigenfnunctions
recComponent = nlsaComponent_rec_phi( 'basisFunctionIdx', In.idxPhiRec );

% Reconstructed data from SVD 
svdRecComponent = nlsaComponent_rec_phi( 'basisFunctionIdx', In.idxVTRec );


%% RECONSTRUCTED TARGET COMPONENTS -- OUT-OF-SAMPLE DATA
if ifOse
    % Nystrom extension
    oseEmbTemplate = nlsaEmbeddedComponent_ose_n( ...
        'eigenfunctionIdx', Out.idxPhiRecOSE );
    oseRecComponent = nlsaComponent_rec();
end

%% BUILD NLSA MODEL    

if ifOse
    if ifDen
        % Variable-bandwidth kernel and out-of-sample extension
        model = nlsaModel_den_ose( ...
                   'path',                            nlsaPath, ...
                   'sourceComponent',                 srcComponent, ...
                   'targetComponent',                 trgComponent, ...
                   componentNames{ : }, ...
                   'timeFormat',                      In.tFormat, ...
                   'srcTime',                         tNum, ...
                   'embeddingOrigin',                 idxT1, ...
                   'embeddingTemplate',               embComponent, ...
                   'targetEmbeddingTemplate',         trgEmbComponent, ...
                   'embeddingPartition',              embPartition, ...
                   'denPairwiseDistanceTemplate',     denPDist, ...
                   'kernelDensityTemplate',           den, ...
                   'pairwiseDistanceTemplate',        pDist, ...
                   'symmetricDistanceTemplate',       sDist, ...
                   'diffusionOperatorTemplate',       diffOp, ...
                   'projectionTemplate',              prjComponent, ...
                   'reconstructionTemplate',          recComponent, ...
                   'reconstructionPartition',         recPartition, ...
                   'linearMapTemplate',               linMap, ...
                   'svdReconstructionTemplate',       svdRecComponent, ...
                   'outComponent',                    outComponent, ...
                   'outTargetComponent',              outTrgComponent, ...
                   'outTimeFormat',                   Out.tFormat, ...
                   'outTime',                         tNumO, ...
                   'outEmbeddingOrigin',              idxT1O, ...
                   'outEmbeddingTemplate',            outEmbComponent, ...
                   'outEmbeddingPartition',           outEmbPartition, ... 
                   'osePairwiseDistanceTemplate',     osePDist, ...
                   'oseDenPairwiseDistanceTemplate',  oseDenPDist, ...
                   'oseKernelDensityTemplate',        oseDen, ...
                   'oseDiffusionOperatorTemplate',    oseDiffOp, ...
                   'oseEmbeddingTemplate',            oseEmbTemplate, ...
                   'oseReconstructionPartition',      oseRecPartition );

    else
        % Out-of-sample extension
        model = nlsaModel_ose( ...
                   'path',                            nlsaPath, ...
                   'sourceComponent',                 srcComponent, ...
                   'targetComponent',                 trgComponent, ...
                   componentNames{ : }, ...
                   'timeFormat',                      In.tFormat, ...
                   'srcTime',                         tNum, ...
                   'embeddingOrigin',                 idxT1, ...
                   'embeddingTemplate',               embComponent, ...
                   'targetEmbeddingTemplate',         trgEmbComponent, ...
                   'embeddingPartition',              embPartition, ...
                   'pairwiseDistanceTemplate',        pDist, ...
                   'symmetricDistanceTemplate',       sDist, ...
                   'diffusionOperatorTemplate',       diffOp, ...
                   'projectionTemplate',              prjComponent, ...
                   'reconstructionTemplate',          recComponent, ...
                   'reconstructionPartition',         recPartition, ...
                   'linearMapTemplate',               linMap, ...
                   'svdReconstructionTemplate',       svdRecComponent, ...
                   'outComponent',                    outComponent, ...
                   'outTargetComponent',              outTrgComponent, ...
                   'outTimeFormat',                   Out.tFormat, ...
                   'outTime',                         tNumO, ...
                   'outEmbeddingOrigin',              idxT1O, ...
                   'outEmbeddingTemplate',            outEmbComponent, ...
                   'outEmbeddingPartition',           outEmbPartition, ... 
                   'osePairwiseDistanceTemplate',     osePDist, ...
                   'oseDiffusionOperatorTemplate',    oseDiffOp, ...
                   'oseEmbeddingTemplate',            oseEmbTemplate, ...
                   'oseReconstructionPartition',      oseRecPartition );

    end
else 

    if ifDen                
        % Variable-bandwidth kernel 
        model = nlsaModel_den( ...
                   'path',                            nlsaPath, ...
                   'sourceComponent',                 srcComponent, ...
                   'targetComponent',                 trgComponent, ...
                   componentNames{ : }, ...
                   'timeFormat',                      In.tFormat, ...
                   'srcTime',                         tNum, ...
                   'embeddingOrigin',                 idxT1, ...
                   'embeddingTemplate',               embComponent, ...
                   'targetEmbeddingTemplate',         trgEmbComponent, ...
                   'embeddingPartition',              embPartition, ...
                   'denPairwiseDistanceTemplate',     denPDist, ...
                   'kernelDensityTemplate',           den, ...
                   'pairwiseDistanceTemplate',        pDist, ...
                   'symmetricDistanceTemplate',       sDist, ...
                   'diffusionOperatorTemplate',       diffOp, ...
                   'projectionTemplate',              prjComponent, ...
                   'reconstructionTemplate',          recComponent, ...
                   'reconstructionPartition',         recPartition, ...
                   'linearMapTemplate',               linMap, ...
                   'svdReconstructionTemplate',       svdRecComponent );

    else
        %  Basic NLSA model
        model = nlsaModel( ...
                   'path',                            nlsaPath, ...
                   'sourceComponent',                 srcComponent, ...
                   'targetComponent',                 trgComponent, ...
                   componentNames{ : }, ...
                   'timeFormat',                      In.tFormat, ...
                   'srcTime',                         tNum, ...
                   'embeddingOrigin',                 idxT1, ...
                   'embeddingTemplate',               embComponent, ...
                   'targetEmbeddingTemplate',         trgEmbComponent, ...
                   'embeddingPartition',              embPartition, ...
                   'pairwiseDistanceTemplate',        pDist, ...
                   'symmetricDistanceTemplate',       sDist, ...
                   'diffusionOperatorTemplate',       diffOp, ...
                   'projectionTemplate',              prjComponent, ...
                   'reconstructionTemplate',          recComponent, ...
                   'reconstructionPartition',         recPartition, ...
                   'linearMapTemplate',               linMap, ...
                   'svdReconstructionTemplate',       svdRecComponent );
   end
end

